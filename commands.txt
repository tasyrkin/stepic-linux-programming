
# create executable from hello.c and main.c
# -c flag tells gcc only to compile, but not link
gcc -o hello.o -c hello.c
gcc -o main.o -c main.c
gcc -o hello hello.o main.o

# create dynamic library. Dynamic library naming convention is "lib<NameOfTheLibray>.so<versionNumber>"
# -fPIC tells gcc to generate position independent code
# What is position independent code? PIC is code that works no matter where in memory it is placed.
# Because several different programs can all use one instance of your shared library,
# the library cannot store things at fixed addresses, since the location of that library in memory
# will vary from program to program.
gcc -o libHello.so -shared -fPIC hello.c

# show list symbols from object files
nm libHello.so

# build executable from code and shared library
gcc -o hello main.c libHello.so

# ld is the system mechanism for loading shared libraries
# ld must know where the dynamic library is located, there are 2 ways:
# 1. register library in ld (put the libary into directory which ld already knows), use env variable LD_LIBRARY_PATH
# 2. use env LD_PRELOAD which looks there even before looking into its standard paths

# from http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html
# The default GNU loader, ld.so, looks for libraries in the following order:
#  It looks in the DT_RPATH section of the executable, unless there is a DT_RUNPATH section.
#  It looks in LD_LIBRARY_PATH. This is skipped if the executable is setuid/setgid for security reasons.
#  It looks in the DT_RUNPATH section of the executable unless the setuid/setgid bits are set (for security reasons).
#  It looks in the cache file /etc/ld/so/cache (disabled with the ‘-z nodeflib’ linker option).
#  It looks in the default directories /lib then /usr/lib (disabled with the ‘-z nodeflib’ linker option).

# setting env variable to a current directory
# exporting the environment variable is necessary for child processes to find it
export LD_LIBRARY_PATH=.

# create executable without modifying LD_LIBRARY_PATH env variable
# -lHello flag is looking for libHello.so library
# -L. flag is the path where to search shared libraries
# GCC first searches for libraries in /usr/local/lib, then in /usr/lib.
# Following that, it searches for libraries in the directories specified by the -L parameter,
# in the order specified on the command line
gcc main.c -fPIC -L. -lHello -o hello

# changing library to hello.cpp does not allow an executable to find it anymore
gcc -o libHello.so -fPIC -shared hello.cpp

# the hello_message was compiled to _Z13hello_messagePKc
nm libHello.so

# to find the original message use c++filt
c++filt _Z13hello_messagePKc

# this happens because the function hello_message was not declared according to c++ agreements -> extern "C"
# extern "C" tells the C++ compiler to have "C" linkage, the compiler does not mangle the name

# print shared library dependencies 
ldd hello
